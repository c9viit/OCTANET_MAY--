<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>To-Do List</title>
<style>
  body {
    font-family: Arial, sans-serif;
  }
  .container {
    max-width: 600px;
    margin: auto;
    padding: 20px;
  }
  input[type="text"], input[type="date"] {
    padding: 10px;
    margin: 5px 0;
    width: 100%;
    box-sizing: border-box;
  }
  .button {
    padding: 10px 20px;
    margin: 5px 0;
    cursor: pointer;
  }
  .task-list {
    margin-top: 20px;
  }
  .task {
    background: #f9f9f9;
    border: 1px solid #ddd;
    margin-bottom: 10px;
    padding: 10px;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  .task.complete {
    text-decoration: line-through;
    color: #888;
  }
</style>
</head>
<body>
<div class="container">
  <h2>To-Do List</h2>
  <input type="text" id="taskInput" placeholder="Enter a new task...">
  <input type="date" id="dueDateInput">
  <button class="button" onclick="addTask()">Add Task</button>
  <div class="task-list" id="taskList"></div>
</div>

<script>
  function addTask() {
    var taskInput = document.getElementById('taskInput');
    var dueDateInput = document.getElementById('dueDateInput');
    var taskList = document.getElementById('taskList');
    var taskText = taskInput.value;
    var dueDate = dueDateInput.value;

    if (taskText === '') {
      alert('Please enter a task.');
      return;
    }

    var task = document.createElement('div');
    task.className = 'task';
    task.innerHTML = `
      <span>${taskText} (Due: ${dueDate})</span>
      <div>
        <button class="button" onclick="markComplete(this)">Complete</button>
        <button class="button" onclick="deleteTask(this)">Delete</button>
      </div>
    `;
    taskList.appendChild(task);

    taskInput.value = '';
    dueDateInput.value = '';
  }

  function markComplete(button) {
    var task = button.parentElement.parentElement;
    task.classList.toggle('complete');
  }

  function deleteTask(button) {
    var task = button.parentElement.parentElement;
    task.remove();
  }
</script>
<!-- Code injected by live-server -->
<script>
	// <![CDATA[  <-- For SVG support
	if ('WebSocket' in window) {
		(function () {
			function refreshCSS() {
				var sheets = [].slice.call(document.getElementsByTagName("link"));
				var head = document.getElementsByTagName("head")[0];
				for (var i = 0; i < sheets.length; ++i) {
					var elem = sheets[i];
					var parent = elem.parentElement || head;
					parent.removeChild(elem);
					var rel = elem.rel;
					if (elem.href && typeof rel != "string" || rel.length == 0 || rel.toLowerCase() == "stylesheet") {
						var url = elem.href.replace(/(&|\?)_cacheOverride=\d+/, '');
						elem.href = url + (url.indexOf('?') >= 0 ? '&' : '?') + '_cacheOverride=' + (new Date().valueOf());
					}
					parent.appendChild(elem);
				}
			}
			var protocol = window.location.protocol === 'http:' ? 'ws://' : 'wss://';
			var address = protocol + window.location.host + window.location.pathname + '/ws';
			var socket = new WebSocket(address);
			socket.onmessage = function (msg) {
				if (msg.data == 'reload') window.location.reload();
				else if (msg.data == 'refreshcss') refreshCSS();
			};
			if (sessionStorage && !sessionStorage.getItem('IsThisFirstTime_Log_From_LiveServer')) {
				console.log('Live reload enabled.');
				sessionStorage.setItem('IsThisFirstTime_Log_From_LiveServer', true);
			}
		})();
	}
	else {
		console.error('Upgrade your browser. This Browser is NOT supported WebSocket for Live-Reloading.');
	}
	// ]]>
</script>
</body>
</html>
